---
import Card from "./Card.astro";

interface CarouselProps {
  title: string;
  cards: CardProps[];
  id: string;
}

const { title, cards, id } = Astro.props as CarouselProps;
---

<div
  class="carousel container relative overflow-hidden my-4 w-10/12 mx-auto"
  data-carousel-id={id}
>
  <h2 class="my-2 text-white font-bold text-3xl">{title}</h2>
  <div
    id={`${id}-track`}
    class="flex transition-transform duration-500 ease-in-out gap-x-4"
    data-cards={cards.length}
  >
    {
      cards.map((card, index) => (
        <div class="xs:min-w-full sm:min-w-1/3 lg:min-w-auto flex-shrink-0">
          <Card {...card} lazy={index >= 4} />
        </div>
      ))
    }
  </div>
  <button
    id={`${id}-prevBtn`}
    class="absolute left-0 top-1/2 transform -translate-y-1/2 bg-white p-2 shadow-lg"
  >
    Prev
  </button>
  <button
    id={`${id}-nextBtn`}
    class="absolute right-0 top-1/2 transform -translate-y-1/2 bg-white p-2 shadow-lg"
  >
    Next
  </button>
</div>

<script>
  const carousels = Array.from(
    document.querySelectorAll(".carousel.container")
  );

  type CarouselState = {
    carouselId: string;
    carousel: HTMLElement | null;
    prevBtn: HTMLElement | null;
    nextBtn: HTMLElement | null;
    cardCount: number;
    cardWidth: number;
    currentIndex: number;
    visibleCards: number;
  };

  function createCarouselController(id: string) {
    const carousel = document.getElementById(`${id}-track`);
    const prevBtn = document.getElementById(`${id}-prevBtn`);
    const nextBtn = document.getElementById(`${id}-nextBtn`);

    const state: CarouselState = {
      carouselId: id,
      carousel,
      prevBtn,
      nextBtn,
      cardCount: carousel ? Number(carousel.dataset["cards"] || 0) : 0,
      cardWidth: carousel?.firstElementChild ? (carousel.firstElementChild as HTMLElement).clientWidth : 0,
      currentIndex: 0,
      visibleCards: 1,
    };

    const updateDimensions = () => {
      if (!state.carousel) return;

      const firstCard = state.carousel.firstElementChild as HTMLElement | null;
      state.cardWidth = firstCard ? firstCard.clientWidth : 0;
      state.visibleCards = Math.floor(state.carousel.clientWidth / state.cardWidth);
      updateButtons();
    };

    const updateButtons = () => {
      if (!state.prevBtn || !state.nextBtn) return;

      state.prevBtn.classList.toggle("hidden", state.currentIndex === 0);
      state.nextBtn.classList.toggle(
          "hidden",
          state.currentIndex >= state.cardCount - state.visibleCards
      );
    };

    const moveCarousel = (direction: number) => {
      if (!state.carousel) return;

      const newIndex = state.currentIndex + direction;
      if (newIndex >= 0 && newIndex <= state.cardCount - state.visibleCards) {
        state.currentIndex = newIndex;
        state.carousel.style.transform = `translateX(-${state.currentIndex * state.cardWidth}px)`;
        updateButtons();
      }
    };

    const init = () => {
      if (!state.carousel || !state.prevBtn || !state.nextBtn) {
        console.warn(`Carousel with id ${state.carouselId} is missing required elements.`);
        return;
      }

      globalThis.addEventListener("resize", updateDimensions);
      state.prevBtn.addEventListener("click", () => moveCarousel(-1));
      state.nextBtn.addEventListener("click", () => moveCarousel(1));
      updateDimensions();
      updateButtons();
    };

    init();

    return {
      updateDimensions,
      moveCarousel,
      updateButtons,
    };
  }


  document.addEventListener("DOMContentLoaded", () => {
    for (const carousel of carousels) {
      let carouselEl = carousel as HTMLElement;
      createCarouselController(carouselEl.dataset.carouselId!);
    }
  });
</script>
