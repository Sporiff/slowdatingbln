---
import Card from "./Card.astro";

interface CarouselProps {
  title: string;
  cards: CardProps[];
}

const { title, cards } = Astro.props as CarouselProps;
---

<div class="carousel-container">
  <h2 class="carousel-title">{title}</h2>
  <div id="article-carousel" class="carousel-track" data-cards={cards.length}>
    {
      cards.map((card) => (
        <div class="carousel-card">
          <Card {...card} />
        </div>
      ))
    }
  </div>
  <>
    <button id="article-prevBtn" class="carousel-button carousel-prevBtn">
      Prev
    </button>
    <button id="article-nextBtn" class="carousel-button carousel-nextBtn">
      Next
    </button>
  </>
</div>

<style>
  .carousel-container {
    position: relative;
    overflow: hidden;
    margin: 1rem auto;
    width: 83.3333%;
  }

  .carousel-title {
    margin: 0.5rem 0;
    color: white;
    font-weight: bold;
    font-size: 1.875rem;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
    gap: 1rem;
  }

  .carousel-card {
    flex-shrink: 0;
    min-width: 100%;
  }

  @media (min-width: 640px) {
    .carousel-card {
      min-width: 33.3333%;
    }
  }

  @media (min-width: 1024px) {
    .carousel-card {
      min-width: auto;
    }
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: white;
    padding: 0.5rem;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    border: none;
    cursor: pointer;
  }

  .carousel-prevBtn {
    left: 0;
  }

  .carousel-nextBtn {
    right: 0;
  }
</style>

<script>
  const updateCarousel = () => {
    const carousel = document.getElementById("article-carousel")!;
    const prevBtn = document.getElementById("article-prevBtn")!;
    const nextBtn = document.getElementById("article-nextBtn")!;
    const cardCount = Number(carousel?.dataset["cards"]);
    const cardWidth = carousel!.firstElementChild!.clientWidth;
    const visibleCards = Math.floor(carousel!.clientWidth / cardWidth);

    let currentIndex = 0;

    const updateButtons = () => {
      prevBtn.style.display = currentIndex === 0 ? "none" : "block";
      nextBtn.style.display =
        currentIndex >= cardCount - visibleCards ? "none" : "block";
    };

    const moveCarousel = () => {
      carousel!.style.transform = `translateX(-${currentIndex * cardWidth}px)`;
      updateButtons();
    };

    prevBtn.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
        moveCarousel();
      }
    });

    nextBtn.addEventListener("click", () => {
      if (currentIndex < cardCount - visibleCards) {
        currentIndex++;
        moveCarousel();
      }
    });

    moveCarousel();
  };

  window.addEventListener("resize", updateCarousel);
  updateCarousel();
</script>
